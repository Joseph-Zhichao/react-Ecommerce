{"ast":null,"code":"var _jsxFileName = \"/Users/josephzhu/Desktop/front-end-projects/eCommerce/src/context/shopContext.js\";\n// import React, { Component } from 'react'\n// import Client from 'shopify-buy'\n// const ShopContext = React.createContext();\n// const client = Client.buildClient({\n//     storefrontAccessToken: \"dd4d4dc146542ba7763305d71d1b3d38\",\n//     domain: \"graphql.myshopify.com\",\n//   });\n// class ShopProvider extends Component {\n//     state = {\n//         products: [],\n//         product:{},\n//         checkout:{},\n//         isCartOpen: false,\n//         test: 'test'\n//     }\n//     componentDidMount() {\n//         //Check if localStorage has a checkout_id saved\n//         if (localStorage.checkout) {\n//             this.fetchCheckout(localStorage.checkout);\n//         } else {\n//             this.createCheckout();\n//         }\n//         //if there is no checkout_id in localStorage then we will create a new checkout\n//         //else fetch the checkout from shopify\n//     }\n//     createCheckout = async () => {\n//         const checkout = await client.checkout.create();\n//         this.setState({checkout: checkout});\n//     }\n//     addItemToCheckout = async( variantId, quantity) => {\n//         const lineItemsToAdd = [\n//             {\n//                 variantId,\n//                 quantity: parseInt(quantity, 10)\n//             }];\n//         const checkout = await client.checkout.addLineItems(this.state.checkout.id,lineItemsToAdd);\n//         this.setState({checkout: checkout});\n//         this.openCart();\n//     }\n//     fetchAllProducts = async() => {\n//         const products = await client.product.fetchAll();\n//         this.setState({products: products});\n//     }\n//     fetchProductWithId = async(id) => {\n//         const product = await client.product.fetch(id);\n//         this.setState({product:product});\n//         return product;\n//     }\n//     closeCart = () => { this.setState( {isCartOpen: false}) };\n//     openCart = () => { this.setState( {isCartOpen: true}) };\n//     render() {\n//         return (\n//             <div>\n//                 <ShopContext.Provider value = { {\n//                     ...this.state,\n//                     fetchAllProducts:this.fetchAllProducts,\n//                     fetchProductWithId:this.fetchProductWithId,\n//                     closeCart:this.closeCart,\n//                     openCart:this.openCart,\n//                     addItemToCart:this.addItemToCart\n//                 }}>\n//                     {this.props.children}\n//                 </ShopContext.Provider>\n//             </div>\n//         )\n//     }\n// }\n// const ShopConsumer = ShopContext.Consumer;\n// export { ShopConsumer, ShopContext}\n// export default ShopProvider\nimport React, { Component } from \"react\";\nimport Client from \"shopify-buy\";\nconst ShopContext = React.createContext();\nconst client = Client.buildClient({\n  storefrontAccessToken: \"dd4d4dc146542ba7763305d71d1b3d38\",\n  domain: \"graphql.myshopify.com\"\n});\n\nclass ShopProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      products: [],\n      product: {},\n      checkout: {},\n      isCartOpen: false\n    };\n\n    this.createCheckout = async () => {\n      const checkout = await client.checkout.create();\n      localStorage.setItem(\"checkout\", checkout.id);\n      await this.setState({\n        checkout: checkout\n      });\n    };\n\n    this.fetchCheckout = async checkoutId => {\n      client.checkout.fetch(checkoutId).then(checkout => {\n        this.setState({\n          checkout: checkout\n        });\n      }).catch(err => console.log(err));\n    };\n\n    this.addItemToCheckout = async (variantId, quantity) => {\n      const lineItemsToAdd = [{\n        variantId,\n        quantity: parseInt(quantity, 10)\n      }];\n      const checkout = await client.checkout.addLineItems(this.state.checkout.id, lineItemsToAdd);\n      this.setState({\n        checkout: checkout\n      });\n      console.log(checkout);\n      this.openCart();\n    };\n\n    this.fetchAllProducts = async () => {\n      const products = await client.product.fetchAll();\n      this.setState({\n        products: products\n      });\n    };\n\n    this.fetchProductWithId = async id => {\n      const product = await client.product.fetch(id);\n      this.setState({\n        product: product\n      });\n      console.log(JSON.stringify(product));\n      return product;\n    };\n\n    this.closeCart = () => {\n      this.setState({\n        isCartOpen: false\n      });\n    };\n\n    this.openCart = () => {\n      this.setState({\n        isCartOpen: true\n      });\n    };\n  }\n\n  componentDidMount() {\n    // this.createCheckout();\n    //Check if localStorage has a checkout_id saved\n    if (localStorage.checkout) {\n      this.fetchCheckout(localStorage.checkout);\n    } else {\n      this.createCheckout();\n    } //if there is no checkout_id in localStorage then we will create a new checkout\n    //else fetch the checkout from shopify\n\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(ShopContext.Provider, {\n      value: { ...this.state,\n        fetchAllProducts: this.fetchAllProducts,\n        fetchProductWithId: this.fetchProductWithId,\n        closeCart: this.closeCart,\n        openCart: this.openCart,\n        addItemToCheckout: this.addItemToCheckout\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 7\n      }\n    }, this.props.children);\n  }\n\n}\n\nconst ShopConsumer = ShopContext.Consumer;\nexport { ShopConsumer, ShopContext };\nexport default ShopProvider;","map":{"version":3,"sources":["/Users/josephzhu/Desktop/front-end-projects/eCommerce/src/context/shopContext.js"],"names":["React","Component","Client","ShopContext","createContext","client","buildClient","storefrontAccessToken","domain","ShopProvider","state","products","product","checkout","isCartOpen","createCheckout","create","localStorage","setItem","id","setState","fetchCheckout","checkoutId","fetch","then","catch","err","console","log","addItemToCheckout","variantId","quantity","lineItemsToAdd","parseInt","addLineItems","openCart","fetchAllProducts","fetchAll","fetchProductWithId","JSON","stringify","closeCart","componentDidMount","render","props","children","ShopConsumer","Consumer"],"mappings":"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","sourcesContent":["// import React, { Component } from 'react'\n// import Client from 'shopify-buy'\n\n// const ShopContext = React.createContext();\n\n// const client = Client.buildClient({\n//     storefrontAccessToken: \"dd4d4dc146542ba7763305d71d1b3d38\",\n//     domain: \"graphql.myshopify.com\",\n//   });\n\n// class ShopProvider extends Component {\n\n//     state = {\n//         products: [],\n//         product:{},\n//         checkout:{},\n//         isCartOpen: false,\n//         test: 'test'\n//     }\n\n\n//     componentDidMount() {\n//         //Check if localStorage has a checkout_id saved\n//         if (localStorage.checkout) {\n//             this.fetchCheckout(localStorage.checkout);\n//         } else {\n//             this.createCheckout();\n//         }\n//         //if there is no checkout_id in localStorage then we will create a new checkout\n    \n//         //else fetch the checkout from shopify\n//     }\n\n//     createCheckout = async () => {\n//         const checkout = await client.checkout.create();\n//         this.setState({checkout: checkout});\n//     }\n\n//     addItemToCheckout = async( variantId, quantity) => {\n//         const lineItemsToAdd = [\n//             {\n//                 variantId,\n//                 quantity: parseInt(quantity, 10)\n//             }];\n\n//         const checkout = await client.checkout.addLineItems(this.state.checkout.id,lineItemsToAdd);\n//         this.setState({checkout: checkout});\n\n//         this.openCart();\n//     }\n\n//     fetchAllProducts = async() => {\n//         const products = await client.product.fetchAll();\n//         this.setState({products: products});\n//     }\n\n//     fetchProductWithId = async(id) => {\n//         const product = await client.product.fetch(id);\n//         this.setState({product:product});\n//         return product;\n//     }\n\n//     closeCart = () => { this.setState( {isCartOpen: false}) };\n\n//     openCart = () => { this.setState( {isCartOpen: true}) };\n\n//     render() {\n//         return (\n//             <div>\n//                 <ShopContext.Provider value = { {\n//                     ...this.state,\n//                     fetchAllProducts:this.fetchAllProducts,\n//                     fetchProductWithId:this.fetchProductWithId,\n//                     closeCart:this.closeCart,\n//                     openCart:this.openCart,\n//                     addItemToCart:this.addItemToCart\n//                 }}>\n//                     {this.props.children}\n//                 </ShopContext.Provider>\n//             </div>\n//         )\n//     }\n// }\n\n// const ShopConsumer = ShopContext.Consumer;\n\n// export { ShopConsumer, ShopContext}\n\n// export default ShopProvider\n\n\nimport React, { Component } from \"react\";\nimport Client from \"shopify-buy\";\n\nconst ShopContext = React.createContext();\n\nconst client = Client.buildClient({\n  storefrontAccessToken: \"dd4d4dc146542ba7763305d71d1b3d38\",\n  domain: \"graphql.myshopify.com\",\n});\n\nclass ShopProvider extends Component {\n  state = {\n    products: [],\n    product: {},\n    checkout: {},\n    isCartOpen: false,\n  };\n\n  componentDidMount() {\n    // this.createCheckout();\n\n    //Check if localStorage has a checkout_id saved\n    if (localStorage.checkout) {\n      this.fetchCheckout(localStorage.checkout);\n    } else {\n      this.createCheckout();\n    }\n    //if there is no checkout_id in localStorage then we will create a new checkout\n\n    //else fetch the checkout from shopify\n  }\n\n  createCheckout = async () => {\n    const checkout = await client.checkout.create();\n    localStorage.setItem(\"checkout\", checkout.id);\n    await this.setState({ checkout: checkout });\n  };\n\n  fetchCheckout = async (checkoutId) => {\n    client.checkout\n      .fetch(checkoutId)\n      .then((checkout) => {\n        this.setState({ checkout: checkout });\n      })\n      .catch((err) => console.log(err));\n  };\n\n  addItemToCheckout = async (variantId, quantity) => {\n    const lineItemsToAdd = [\n      {\n        variantId,\n        quantity: parseInt(quantity, 10),\n      },\n    ];\n    const checkout = await client.checkout.addLineItems(\n      this.state.checkout.id,\n      lineItemsToAdd\n    );\n    this.setState({ checkout: checkout });\n    console.log(checkout);\n\n    this.openCart();\n  };\n\n  fetchAllProducts = async () => {\n    const products = await client.product.fetchAll();\n    this.setState({ products: products });\n  };\n\n  fetchProductWithId = async (id) => {\n    const product = await client.product.fetch(id);\n    this.setState({ product: product });\n    console.log(JSON.stringify(product));\n\n    return product;\n  };\n\n  closeCart = () => {\n    this.setState({ isCartOpen: false });\n  };\n  openCart = () => {\n    this.setState({ isCartOpen: true });\n  };\n\n  render() {\n    return (\n      <ShopContext.Provider\n        value={{\n          ...this.state,\n          fetchAllProducts: this.fetchAllProducts,\n          fetchProductWithId: this.fetchProductWithId,\n          closeCart: this.closeCart,\n          openCart: this.openCart,\n          addItemToCheckout: this.addItemToCheckout,\n        }}\n      >\n        {this.props.children}\n      </ShopContext.Provider>\n    );\n  }\n}\n\nconst ShopConsumer = ShopContext.Consumer;\n\nexport { ShopConsumer, ShopContext };\n\nexport default ShopProvider;"]},"metadata":{},"sourceType":"module"}