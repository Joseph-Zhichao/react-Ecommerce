{"ast":null,"code":"var _jsxFileName = \"/Users/josephzhu/Desktop/front-end-projects/eCommerce/src/context/shopContext.js\";\nimport React, { Component } from 'react';\nimport Client from 'shopify-buy';\nconst ShopContext = React.createContext();\nconst client = Client.buildClient({\n  storefrontAccessToken: \"dd4d4dc146542ba7763305d71d1b3d38\",\n  domain: \"graphql.myshopify.com\"\n});\n\nclass ShopProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      products: [],\n      product: {},\n      checkout: {},\n      isCartOpen: false,\n      test: 'test'\n    };\n\n    this.createCheckout = async () => {\n      const checkout = await client.checkout.create();\n      this.setState({\n        checkout: checkout\n      });\n    };\n\n    this.addItemToCart = async (variantId, quantity) => {\n      const lineItemToAdd = [{\n        variantId,\n        quantity: parseInt(quantity, 10)\n      }];\n      const checkout = await client.checkout.addLineItems(this.state.checkout.id, lineItemToAdd);\n      this.setState({\n        checkout: checkout\n      });\n    };\n\n    this.fetchAllProducts = async () => {\n      const products = await client.product.fetchAll();\n      this.setState({\n        products: products\n      });\n    };\n\n    this.fetchProductWithId = async id => {\n      const product = await client.product.fetch(id);\n      this.setState({\n        product: product\n      });\n    };\n\n    this.closeCart = () => {\n      this.setState({\n        isCartOpen: false\n      });\n    };\n\n    this.openCart = () => {\n      this.setState({\n        isCartOpen: true\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.createCheckout();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ShopContext.Provider, {\n      value: { ...this.state,\n        fetchAllProducts: this.fetchAllProducts,\n        fetchProductWithId: this.fetchProductWithId,\n        closeCart: this.closeCart,\n        openCart: this.openCart,\n        addItemToCart: this.addItemToCart\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }\n    }, this.props.children));\n  }\n\n}\n\nconst ShopConsumer = ShopContext.Consumer;\nexport { ShopConsumer, ShopContext };\nexport default ShopProvider;","map":{"version":3,"sources":["/Users/josephzhu/Desktop/front-end-projects/eCommerce/src/context/shopContext.js"],"names":["React","Component","Client","ShopContext","createContext","client","buildClient","storefrontAccessToken","domain","ShopProvider","state","products","product","checkout","isCartOpen","test","createCheckout","create","setState","addItemToCart","variantId","quantity","lineItemToAdd","parseInt","addLineItems","id","fetchAllProducts","fetchAll","fetchProductWithId","fetch","closeCart","openCart","componentDidMount","render","props","children","ShopConsumer","Consumer"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Client from 'shopify-buy'\n\nconst ShopContext = React.createContext();\n\nconst client = Client.buildClient({\n    storefrontAccessToken: \"dd4d4dc146542ba7763305d71d1b3d38\",\n    domain: \"graphql.myshopify.com\",\n  });\n\nclass ShopProvider extends Component {\n\n    state = {\n        products: [],\n        product:{},\n        checkout:{},\n        isCartOpen: false,\n        test: 'test'\n    }\n\n\n    componentDidMount() {\n        this.createCheckout();\n    }\n\n    createCheckout = async () => {\n        const checkout = await client.checkout.create();\n        this.setState({checkout: checkout});\n    }\n\n    addItemToCart = async( variantId, quantity) => {\n        const lineItemToAdd = [{\n            variantId,\n            quantity: parseInt(quantity, 10)\n        }];\n\n        const checkout = await client.checkout.addLineItems(this.state.checkout.id,lineItemToAdd)\n        this.setState({checkout: checkout})\n    }\n\n    fetchAllProducts = async() => {\n        const products = await client.product.fetchAll();\n        this.setState({products: products});\n    }\n\n    fetchProductWithId = async(id) => {\n        const product = await client.product.fetch(id);\n        this.setState({product:product});\n    }\n\n    closeCart = () => { this.setState( {isCartOpen: false}) }\n\n    openCart = () => { this.setState( {isCartOpen: true}) }\n\n    render() {\n        return (\n            <div>\n                <ShopContext.Provider value = { {\n                    ...this.state,\n                    fetchAllProducts:this.fetchAllProducts,\n                    fetchProductWithId:this.fetchProductWithId,\n                    closeCart:this.closeCart,\n                    openCart:this.openCart,\n                    addItemToCart:this.addItemToCart\n                }}>\n                    {this.props.children}\n                </ShopContext.Provider>\n            </div>\n        )\n    }\n}\n\nconst ShopConsumer = ShopContext.Consumer;\n\nexport { ShopConsumer, ShopContext}\n\nexport default ShopProvider"]},"metadata":{},"sourceType":"module"}