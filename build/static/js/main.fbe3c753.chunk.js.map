{"version":3,"sources":["context/shopContext.js","pages/HomePage.js","pages/ProductPage.js","components/Navbar.js","components/Cart.js","components/App.js","serviceWorker.js","index.js"],"names":["ShopContext","React","createContext","client","Client","buildClient","storefrontAccessToken","domain","ShopProvider","state","products","product","checkout","isCartOpen","createCheckout","a","create","localStorage","setItem","id","setState","fetchCheckout","checkoutId","fetch","then","catch","err","console","log","addItemToCheckout","variantId","quantity","lineItemsToAdd","parseInt","addLineItems","openCart","fetchAllProducts","fetchAll","fetchProductWithId","closeCart","this","Provider","value","props","children","Component","Consumer","HomePage","useContext","useEffect","map","key","size","to","p","h","bgImg","images","src","bgSize","bgPos","title","variants","price","ProductPage","useParams","tag","textSize","textColor","textWeight","description","rounded","shadow","bg","m","y","onClick","Navbar","d","flexDir","justify","name","color","Cart","lineItems","isOpen","onClose","border","b","borderColor","hoverTextColor","transition","flexGrow","overflow","flexWrap","length","item","t","variant","image","w","href","webUrl","target","rel","hoverShadow","engine","Styletron","App","debug","debugAfterHydration","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.fbe3c753.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport Client from 'shopify-buy'\n\nconst ShopContext = React.createContext();\n\nconst client = Client.buildClient({\n    storefrontAccessToken: \"dd4d4dc146542ba7763305d71d1b3d38\",\n    domain: \"graphql.myshopify.com\",\n  });\n\nclass ShopProvider extends Component {\n\n    state = {\n        products: [],\n        product:{},\n        checkout:{},\n        isCartOpen: false,\n    }\n\n\n    componentDidMount() {\n        //Check if localStorage has a checkout_id saved\n        if (localStorage.checkout) {\n            this.fetchCheckout(localStorage.checkout);\n        } else {\n            this.createCheckout();\n        }\n        //if there is no checkout_id in localStorage then we will create a new checkout\n    \n        //else fetch the checkout from shopify\n    }\n\n    createCheckout = async () => {\n        const checkout = await client.checkout.create();\n        localStorage.setItem(\"checkout\", checkout.id);\n        this.setState({checkout: checkout});\n    }\n\n    fetchCheckout = async (checkoutId) => {\n        client.checkout\n          .fetch(checkoutId)\n          .then((checkout) => {\n            this.setState({ checkout: checkout });\n          })\n          .catch((err) => console.log(err));\n    }\n\n    addItemToCheckout = async( variantId, quantity) => {\n        const lineItemsToAdd = [\n            {\n                variantId,\n                quantity: parseInt(quantity, 10),\n            }];\n\n        const checkout = await client.checkout.addLineItems(this.state.checkout.id,lineItemsToAdd);\n        this.setState({checkout: checkout});\n\n        this.openCart();\n    }\n\n    fetchAllProducts = async() => {\n        const products = await client.product.fetchAll();\n        this.setState({products: products});\n    }\n\n    fetchProductWithId = async(id) => {\n        const product = await client.product.fetch(id);\n        this.setState({product:product});\n        return product;\n    }\n\n    closeCart = () => { this.setState( {isCartOpen: false}) };\n\n    openCart = () => { this.setState( {isCartOpen: true}) };\n\n    render() {\n        return (\n            <div>\n                <ShopContext.Provider value = { {\n                    ...this.state,\n                    fetchAllProducts:this.fetchAllProducts,\n                    fetchProductWithId:this.fetchProductWithId,\n                    closeCart:this.closeCart,\n                    openCart:this.openCart,\n                    addItemToCheckout:this.addItemToCheckout\n                }}>\n                    {this.props.children}\n                </ShopContext.Provider>\n            </div>\n        )\n    }\n}\n\nconst ShopConsumer = ShopContext.Consumer;\n\nexport { ShopConsumer, ShopContext}\n\nexport default ShopProvider","import React, { useContext, useEffect } from 'react'\nimport ShopProvider, { ShopContext } from '../context/shopContext'\nimport { Container, Text, Div, Row, Col } from 'atomize'\nimport { Link } from 'react-router-dom'\n\nconst HomePage = () => {\n\n    const {fetchAllProducts,products} = useContext(ShopContext);\n\n    useEffect( () => {\n        fetchAllProducts();\n        return () => {\n            \n        };\n    },[fetchAllProducts])\n\n    if (!products) return <div>loading</div>\n\n\n    return(\n        <Container>\n            <Row>\n                {products.map(product => (\n                    <Col key = {product.id} size = \"3\">\n                        <Link to={`/product/${product.id}`}>\n                            <Div p=\"2rem\">\n                                <Div \n                                    h=\"20rem\"\n                                    bgImg = {product.images[0].src}\n                                    bgSize = \"cover\"\n                                    bgPos = \"center center\"\n                                />\n                                <Text>{product.title}</Text>\n                                <Text>{product.variants[0].price}</Text>\n                            </Div>\n                        </Link>\n                    </Col>\n                ))}\n            </Row>\n        </Container>\n    )\n}\n\nexport default HomePage","import React, { useEffect, useContext } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { ShopContext } from '../context/shopContext'\nimport { Text, Div, Button, Row, Col, Container } from 'atomize'\n\nconst ProductPage = () => {\n\n    let {id} = useParams();\n\n    const { addItemToCheckout, fetchProductWithId, product, openCart } = useContext(ShopContext);\n\n    useEffect(() => {\n        fetchProductWithId(id);\n        return () => {\n\n        }\n    }, [fetchProductWithId,id])\n\n    if(!product.title) return <div>loading</div>\n\n    return (\n        <Container>\n            <Row>\n                <Col>\n                    <Div bgImg = {product.images[0].src} bgSize = \"cover\" bgPos = \"center center\"\n                        h=\"40rem\"/>\n                </Col>\n                <Col>\n                    <Text>{product.title}</Text>\n                    <Text>${product.variants[0].price}</Text>\n                    <Text tag=\"p\" textSize=\"paragraph\" textColor=\"gray900\" textWeight=\"200\">{product.description}</Text>\n                    <Button rounded=\"0\" shadow=\"3\" bg=\"black500\" m={{ y: '2rem' }} \n                    onClick = { () => addItemToCheckout(product.variants[0].id, 1)}>\n                    Add To Cart</Button>\n                </Col>\n            </Row>\n        </Container>\n    )\n}\n\nexport default ProductPage\n","import React, {useContext} from 'react'\nimport { Container, Anchor, Icon } from 'atomize'\nimport { Link } from 'react-router-dom'\nimport { ShopContext } from '../context/shopContext'\n\nconst Navbar = () => {\n\n    const { openCart } = useContext(ShopContext)\n\n    return (\n        <Container d=\"flex\" flexDir=\"row\" p=\"2rem\" justify=\"space-between\" >\n            <Link to=\"/\"><Icon name=\"Store\" size=\"30px\" color=\"black500\" /></Link>\n            <Anchor onClick={() => openCart()}><Icon name=\"Bag\" size=\"20px\" color=\"black500\" /></Anchor>\n        </Container>\n    )\n}\n\nexport default Navbar","import React, { useContext } from 'react'\nimport { Div, SideDrawer, Text, Row, Col, Anchor, Button, Container, Icon } from \"atomize\";\nimport {ShopContext} from '../context/shopContext'\n\nconst Cart = () => {\n\n    const { isCartOpen, closeCart, checkout } = useContext(ShopContext)\n\n    if (checkout.lineItems) {\n        return (\n            <SideDrawer isOpen={isCartOpen} onClose={closeCart}>\n                <Container d=\"flex\" flexDir=\"column\" h=\"100%\">\n                    <Row justify=\"space-between\" border={{ b: '1px solid' }} p=\"0.7rem\" borderColor=\"gray300\">\n                        <Text tag=\"h1\" textColor=\"black500\" textSize=\"paragraph\" hoverTextColor=\"black700\" transition=\"0.3s\">Bag</Text>\n                        <Anchor onClick={() => closeCart()} ><Icon name=\"Cross\" color=\"black500\"/></Anchor>\n                    </Row>\n                    <Row flexGrow=\"2\" p=\"0.7rem\" overflow=\"auto\" flexWrap=\"nowrap\" flexDir=\"column\">\n                        {checkout.lineItems.length < 1 ?\n                            <Row>\n                                <Col><Text tag=\"h1\" textColor=\"black500\" textSize=\"paragraph\" hoverTextColor=\"black700\" transition=\"0.3s\">Cart Is Empty</Text></Col>\n                            </Row>\n                            :\n                            <>\n                                {checkout.lineItems && checkout.lineItems.map(item => (\n                                    <Row key={item.id} p={{ t:\"5px\" }}>\n                                        <Col>\n                                            <Div bgImg={item.variant.image.src} bgSize=\"cover\" bgPos=\"center\" h=\"5rem\" w=\"4rem\"/>\n                                        </Col>\n                                        <Col>\n                                            <Text>{item.title}</Text>\n                                            <Text>{item.variant.title}</Text>\n                                            <Text>{item.quantity}</Text>\n                                        </Col>\n                                        <Col>\n                                            <Text>{item.variant.price}</Text>\n                                        </Col>\n                                    </Row>\n                                ))}\n                            </>\n                        }\n                    </Row>\n                    <Row border={{ t: '1px solid' }} p=\"0.7rem\" borderColor=\"gray300\">\n                        <Anchor w=\"100%\" href={checkout.webUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n                            <Button w=\"100%\" rounded=\"0\" bg=\"black500\" shadow=\"2\" hoverShadow=\"3\" m={{t: '1rem'}}>\n                                Checkout\n                            </Button>\n                        </Anchor>\n                    </Row>\n                </Container>\n            </SideDrawer>\n        )\n    }\n\n    return null\n\n}\n\nexport default Cart","import React from 'react';\nimport { Provider as StyletronProvider, DebugEngine } from \"styletron-react\";\nimport { Client as Styletron } from \"styletron-engine-atomic\";\nimport { BrowserRouter as Router, Switch, Route} from 'react-router-dom';\nimport HomePage from '../pages/HomePage';\nimport ProductPage from '../pages/ProductPage';\nimport ShopProvider from '../context/shopContext'\nimport Navbar from '../components/Navbar'\nimport Cart from '../components/Cart'\n\nconst debug = process.env.NODE_ENV === \"production\" ? void 0 : new DebugEngine();\n\nconst engine = new Styletron();\n\nfunction App() {\n  return (\n    <ShopProvider>\n      <StyletronProvider value={engine} debug={debug} debugAfterHydration>\n        <Router>\n          <Navbar />\n          <Cart />\n          <Switch>\n            <Route path=\"/product/:id\">\n              <ProductPage/>\n            </Route>\n            <Route path=\"/\">\n              <HomePage/>\n            </Route>\n          </Switch>\n\n        </Router>\n      </StyletronProvider>\n    </ShopProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}